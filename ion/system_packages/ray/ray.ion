import libc

#foreign(header = "<raylib.h>")

enum {
    MaxShaderLocations = 32,
    MaxMaterialMaps = 12,
}

@foreign struct Vector2 {
    x, y: float;
}

@foreign struct Vector3 {
    x, y, z: float;
}

@foreign struct Vector4 {
    x, y, z, w: float;
}

@foreign typedef Quaternion = Vector4;

@foreign struct Matrix {
    m0: float;
    m4: float;
    m8: float;
    m12: float;
    m1: float;
    m5: float;
    m9: float;
    m13: float;
    m2: float;
    m6: float;
    m10: float;
    m14: float;
    m3: float;
    m7: float;
    m11: float;
    m15: float;
}

@foreign struct Color {
    r, g, b, a: uint8;
}

@foreign struct Rectangle {
    x: float;
    y: float;
    width: float;
    height: float;
}

@foreign struct Image {
    width: int;
    height: int;
    mipmaps: int;
    format: int; // PixelFormat
}

@foreign struct Texture {
    id: uint32;
    width: int;
    height: int;
    mipmaps: int;
    format: int; // PixelFormat
}

@foreign struct RenderTexture {
    id: uint32;
    texture: Texture;
    depth: Texture;
}

@foreign typedef Texture2D = Texture;
@foreign typedef TextureCubemap = Texture;

@foreign typedef RenderTexture2D = RenderTexture;

@foreign struct NPatchInfo {
    source: Rectangle;
    left: int;
    top: int;
    right: int;
    bottom: int;
    type: int;
}

@foreign struct CharInfo {
    value: int;
    rec: Rectangle;
    offsetX: int;
    offsetY: int;
    advanceX: int;
}

@foreign struct Font {
    baseSize: int;
    charsCount: int;
    texture: Texture;
    recs: Rectangle*;
    chars: CharInfo*;
}

@foreign struct Camera3D {
    position: Vector3;
    target: Vector3;
    up: Vector3;
    fovy: float;
    type: int;
}

@foreign typedef Camera = Camera2D;

@foreign struct Camera2D {
    offset: Vector2;
    target: Vector2;
    rotation: float;
    zoom: float;
}

@foreign struct Mesh {
    vertexCount: int;
    triangleCount: int;
    vertices: float*;
    texcoords: float*;
    texcoords2: float*;
    normals: float*;
    tangents: float*;
    colors: uint8*;
    indices: uint16*;
    animVertices: float*;
    animNormals: float*;
    boneIds: int*;
    boneWeights: float*;
    vaoID: uint;
    vboID: uint*;
}

@foreign struct Shader {
    id: uint32;
    locs: int32[MaxShaderLocations];
}

@foreign struct MaterialMap {
    texture: Texture;
    color: Color;
    value: float;
}

@foreign struct Material {
    shader: Shader;
    maps: MaterialMap[MaxMaterialMaps];
    params: float*;
}

@foreign struct Model {
    transform: Matrix;
    meshCount: int32;
    meshes: Mesh[];
    materialCount: int32;
    materials: Material[];
    meshMaterial: int32*;
    boneCount: int32;
    bones: BoneInfo[];
    bindPose: Transform[];
}

@foreign struct Transform {
    translation: Vector3;
    rotation: Vector4;
    scale: Vector3;
}

@foreign struct BoneInfo {
    name: int8[32];
    parent: int32;
}

@foreign struct ModelAnimation {
    boneCount: int;
    frameCount: int;
    bones: BoneInfo*;
    framePoses: Transform**;
}

@foreign struct Ray {
    position: Vector3;
    direction: Vector3;
}

@foreign struct RayHitInfo {
    hit: bool;
    distance: float;
    position: Vector3;
    normal: Vector3;
}

@foreign struct BoundingBox {
    min: Vector3;
    max: Vector3;
}

@foreign struct Wave {
    sampleCount: uint32;
    sampleRate: uint32;
    sampleSize: uint32;
    channels: uint32;
}

@foreign struct Sound {
    sampleCount: uint32;
    stream: AudioStream;
}

@foreign struct Music {
    ctxType: int32;
    ctxData: void*;
    sampleCount: uint32;
    loopCount: uint32;
    stream: AudioStream;
}

@foreign struct rAudioBuffer;

@foreign struct AudioStream {
    buffer: rAudioBuffer*;
    sampleRate: uint;
    sampleSize: uint;
    channels: uint;
}

@foreign struct VrDeviceInfo {
    hResolution: int; 
    vResolution: int; 
    hScreenSize: float; 
    vScreenSize: float; 
    vScreenCenter: float; 
    eyeToScreenDistance: float; 
    lensSeparationDistance: float; 
    interpupillaryDistance: float; 
    lensDistortionValues: float[4];
    chromaAbCorrection: float[4];
}

@foregion var LIGHTGRAY = Color{200, 200, 200, 255};
@foregion var GRAY = Color{130, 130, 130, 255};
@foregion var DARKGRAY = Color{80, 80, 80, 255};
@foregion var YELLOW = Color{253, 249, 0, 255};
@foregion var GOLD = Color{255, 203, 0, 255};
@foregion var ORANGE = Color{255, 161, 0, 255};
@foregion var PINK = Color{255, 109, 194, 255};
@foregion var RED = Color{230, 41, 55, 255};
@foregion var MAROON = Color{190, 33, 55, 255};
@foregion var GREEN = Color{0, 228, 48, 255};
@foregion var LIME = Color{0, 158, 47, 255};
@foregion var DARKGREEN = Color{0, 117, 44, 255};
@foregion var SKYBLUE = Color{102, 191, 255, 255};
@foregion var BLUE = Color{0, 121, 241, 255};
@foregion var DARKBLUE = Color{0, 82, 172, 255};
@foregion var PURPLE = Color{200, 122, 255, 255};
@foregion var VIOLET = Color{135, 60, 190, 255};
@foregion var DARKPURPLE = Color{112, 31, 126, 255};
@foregion var BEIGE = Color{211, 176, 131, 255};
@foregion var BROWN = Color{127, 106, 79, 255};
@foregion var DARKBROWN = Color{76, 63, 47, 255};

@foregion var WHITE = Color{255, 255, 255, 255};
@foregion var BLACK = Color{0, 0, 0, 255};
@foregion var BLANK = Color{0, 0, 0, 0};
@foregion var MAGENTA = Color{255, 0, 255, 255};
@foregion var RAYWHITE = Color{245, 245, 245, 255};

@foregion enum ConfigFlag {
    FLAG_VSYNC_HINT         = 0x00000040,   
    FLAG_FULLSCREEN_MODE    = 0x00000002,   
    FLAG_WINDOW_RESIZABLE   = 0x00000004,   
    FLAG_WINDOW_UNDECORATED = 0x00000008,   
    FLAG_WINDOW_HIDDEN      = 0x00000080,   
    FLAG_WINDOW_MINIMIZED   = 0x00000200,   
    FLAG_WINDOW_MAXIMIZED   = 0x00000400,   
    FLAG_WINDOW_UNFOCUSED   = 0x00000800,   
    FLAG_WINDOW_TOPMOST     = 0x00001000,   
    FLAG_WINDOW_ALWAYS_RUN  = 0x00000100,   
    FLAG_WINDOW_TRANSPARENT = 0x00000010,   
    FLAG_WINDOW_HIGHDPI     = 0x00002000,   
    FLAG_MSAA_4X_HINT       = 0x00000020,   
    FLAG_INTERLACED_HINT    = 0x00010000    
}

@foregion enum TraceLogType {
    LOG_ALL = 0,        
    LOG_TRACE,
    LOG_DEBUG,
    LOG_INFO,
    LOG_WARNING,
    LOG_ERROR,
    LOG_FATAL,
    LOG_NONE            
}

@foregion enum KeyboardKey {
    KEY_APOSTROPHE      = 39,
    KEY_COMMA           = 44,
    KEY_MINUS           = 45,
    KEY_PERIOD          = 46,
    KEY_SLASH           = 47,
    KEY_ZERO            = 48,
    KEY_ONE             = 49,
    KEY_TWO             = 50,
    KEY_THREE           = 51,
    KEY_FOUR            = 52,
    KEY_FIVE            = 53,
    KEY_SIX             = 54,
    KEY_SEVEN           = 55,
    KEY_EIGHT           = 56,
    KEY_NINE            = 57,
    KEY_SEMICOLON       = 59,
    KEY_EQUAL           = 61,
    KEY_A               = 65,
    KEY_B               = 66,
    KEY_C               = 67,
    KEY_D               = 68,
    KEY_E               = 69,
    KEY_F               = 70,
    KEY_G               = 71,
    KEY_H               = 72,
    KEY_I               = 73,
    KEY_J               = 74,
    KEY_K               = 75,
    KEY_L               = 76,
    KEY_M               = 77,
    KEY_N               = 78,
    KEY_O               = 79,
    KEY_P               = 80,
    KEY_Q               = 81,
    KEY_R               = 82,
    KEY_S               = 83,
    KEY_T               = 84,
    KEY_U               = 85,
    KEY_V               = 86,
    KEY_W               = 87,
    KEY_X               = 88,
    KEY_Y               = 89,
    KEY_Z               = 90,

    KEY_SPACE           = 32,
    KEY_ESCAPE          = 256,
    KEY_ENTER           = 257,
    KEY_TAB             = 258,
    KEY_BACKSPACE       = 259,
    KEY_INSERT          = 260,
    KEY_DELETE          = 261,
    KEY_RIGHT           = 262,
    KEY_LEFT            = 263,
    KEY_DOWN            = 264,
    KEY_UP              = 265,
    KEY_PAGE_UP         = 266,
    KEY_PAGE_DOWN       = 267,
    KEY_HOME            = 268,
    KEY_END             = 269,
    KEY_CAPS_LOCK       = 280,
    KEY_SCROLL_LOCK     = 281,
    KEY_NUM_LOCK        = 282,
    KEY_PRINT_SCREEN    = 283,
    KEY_PAUSE           = 284,
    KEY_F1              = 290,
    KEY_F2              = 291,
    KEY_F3              = 292,
    KEY_F4              = 293,
    KEY_F5              = 294,
    KEY_F6              = 295,
    KEY_F7              = 296,
    KEY_F8              = 297,
    KEY_F9              = 298,
    KEY_F10             = 299,
    KEY_F11             = 300,
    KEY_F12             = 301,
    KEY_LEFT_SHIFT      = 340,
    KEY_LEFT_CONTROL    = 341,
    KEY_LEFT_ALT        = 342,
    KEY_LEFT_SUPER      = 343,
    KEY_RIGHT_SHIFT     = 344,
    KEY_RIGHT_CONTROL   = 345,
    KEY_RIGHT_ALT       = 346,
    KEY_RIGHT_SUPER     = 347,
    KEY_KB_MENU         = 348,
    KEY_LEFT_BRACKET    = 91,
    KEY_BACKSLASH       = 92,
    KEY_RIGHT_BRACKET   = 93,
    KEY_GRAVE           = 96,

    KEY_KP_0            = 320,
    KEY_KP_1            = 321,
    KEY_KP_2            = 322,
    KEY_KP_3            = 323,
    KEY_KP_4            = 324,
    KEY_KP_5            = 325,
    KEY_KP_6            = 326,
    KEY_KP_7            = 327,
    KEY_KP_8            = 328,
    KEY_KP_9            = 329,
    KEY_KP_DECIMAL      = 330,
    KEY_KP_DIVIDE       = 331,
    KEY_KP_MULTIPLY     = 332,
    KEY_KP_SUBTRACT     = 333,
    KEY_KP_ADD          = 334,
    KEY_KP_ENTER        = 335,
    KEY_KP_EQUAL        = 336
}

@foreign enum AndroidButton {
    KEY_BACK            = 4,
    KEY_MENU            = 82,
    KEY_VOLUME_UP       = 24,
    KEY_VOLUME_DOWN     = 25
}

@foreign enum MouseButton {
    MOUSE_LEFT_BUTTON   = 0,
    MOUSE_RIGHT_BUTTON  = 1,
    MOUSE_MIDDLE_BUTTON = 2
}

@foreign enum MouseCursor {
    MOUSE_CURSOR_DEFAULT       = 0,
    MOUSE_CURSOR_ARROW         = 1,
    MOUSE_CURSOR_IBEAM         = 2,
    MOUSE_CURSOR_CROSSHAIR     = 3,
    MOUSE_CURSOR_POINTING_HAND = 4,
    MOUSE_CURSOR_RESIZE_EW     = 5,     
    MOUSE_CURSOR_RESIZE_NS     = 6,     
    MOUSE_CURSOR_RESIZE_NWSE   = 7,     
    MOUSE_CURSOR_RESIZE_NESW   = 8,     
    MOUSE_CURSOR_RESIZE_ALL    = 9,     
    MOUSE_CURSOR_NOT_ALLOWED   = 10     
}

@foreign enum GamepadNumber {
    GAMEPAD_PLAYER1 = 0,
    GAMEPAD_PLAYER2 = 1,
    GAMEPAD_PLAYER3 = 2,
    GAMEPAD_PLAYER4 = 3
}

@foreign enum GamepadButton {
    GAMEPAD_BUTTON_UNKNOWN = 0,

    GAMEPAD_BUTTON_LEFT_FACE_UP,
    GAMEPAD_BUTTON_LEFT_FACE_RIGHT,
    GAMEPAD_BUTTON_LEFT_FACE_DOWN,
    GAMEPAD_BUTTON_LEFT_FACE_LEFT,

    GAMEPAD_BUTTON_RIGHT_FACE_UP,
    GAMEPAD_BUTTON_RIGHT_FACE_RIGHT,
    GAMEPAD_BUTTON_RIGHT_FACE_DOWN,
    GAMEPAD_BUTTON_RIGHT_FACE_LEFT,

    GAMEPAD_BUTTON_LEFT_TRIGGER_1,
    GAMEPAD_BUTTON_LEFT_TRIGGER_2,
    GAMEPAD_BUTTON_RIGHT_TRIGGER_1,
    GAMEPAD_BUTTON_RIGHT_TRIGGER_2,

    GAMEPAD_BUTTON_MIDDLE_LEFT,
    GAMEPAD_BUTTON_MIDDLE,
    GAMEPAD_BUTTON_MIDDLE_RIGHT,

    GAMEPAD_BUTTON_LEFT_THUMB,
    GAMEPAD_BUTTON_RIGHT_THUMB
}

@foreign enum GamepadAxis {
    GAMEPAD_AXIS_LEFT_X = 0,
    GAMEPAD_AXIS_LEFT_Y = 1,
    
    GAMEPAD_AXIS_RIGHT_X = 2,
    GAMEPAD_AXIS_RIGHT_Y = 3,

    GAMEPAD_AXIS_LEFT_TRIGGER = 4,      
    GAMEPAD_AXIS_RIGHT_TRIGGER = 5      
}

@foreign enum ShaderLocationIndex {
    LOC_VERTEX_POSITION = 0,
    LOC_VERTEX_TEXCOORD01,
    LOC_VERTEX_TEXCOORD02,
    LOC_VERTEX_NORMAL,
    LOC_VERTEX_TANGENT,
    LOC_VERTEX_COLOR,
    LOC_MATRIX_MVP,
    LOC_MATRIX_MODEL,
    LOC_MATRIX_VIEW,
    LOC_MATRIX_PROJECTION,
    LOC_VECTOR_VIEW,
    LOC_COLOR_DIFFUSE,
    LOC_COLOR_SPECULAR,
    LOC_COLOR_AMBIENT,
    LOC_MAP_ALBEDO,          
    LOC_MAP_METALNESS,       
    LOC_MAP_NORMAL,
    LOC_MAP_ROUGHNESS,
    LOC_MAP_OCCLUSION,
    LOC_MAP_EMISSION,
    LOC_MAP_HEIGHT,
    LOC_MAP_CUBEMAP,
    LOC_MAP_IRRADIANCE,
    LOC_MAP_PREFILTER,
    LOC_MAP_BRDF
}

@foreign const LOC_MAP_DIFFUSE = LOC_MAP_ALBEDO;
@foreign const LOC_MAP_SPECULAR = LOC_MAP_METALNESS;

@foreign enum ShaderUniformDataType {
    UNIFORM_FLOAT = 0,
    UNIFORM_VEC2,
    UNIFORM_VEC3,
    UNIFORM_VEC4,
    UNIFORM_INT,
    UNIFORM_IVEC2,
    UNIFORM_IVEC3,
    UNIFORM_IVEC4,
    UNIFORM_SAMPLER2D
}

@foreign enum MaterialMapType {
    MAP_ALBEDO    = 0,       
    MAP_METALNESS = 1,       
    MAP_NORMAL    = 2,
    MAP_ROUGHNESS = 3,
    MAP_OCCLUSION,
    MAP_EMISSION,
    MAP_HEIGHT,
    MAP_CUBEMAP,             
    MAP_IRRADIANCE,          
    MAP_PREFILTER,           
    MAP_BRDF
}

@foreign const MAP_DIFFUSE = MAP_ALBEDO;
@foreign const MAP_SPECULAR = MAP_METALNESS;

@foreign enum PixelFormat {
    UNCOMPRESSED_GRAYSCALE = 1,     
    UNCOMPRESSED_GRAY_ALPHA,        
    UNCOMPRESSED_R5G6B5,            
    UNCOMPRESSED_R8G8B8,            
    UNCOMPRESSED_R5G5B5A1,          
    UNCOMPRESSED_R4G4B4A4,          
    UNCOMPRESSED_R8G8B8A8,          
    UNCOMPRESSED_R32,               
    UNCOMPRESSED_R32G32B32,         
    UNCOMPRESSED_R32G32B32A32,      
    COMPRESSED_DXT1_RGB,            
    COMPRESSED_DXT1_RGBA,           
    COMPRESSED_DXT3_RGBA,           
    COMPRESSED_DXT5_RGBA,           
    COMPRESSED_ETC1_RGB,            
    COMPRESSED_ETC2_RGB,            
    COMPRESSED_ETC2_EAC_RGBA,       
    COMPRESSED_PVRT_RGB,            
    COMPRESSED_PVRT_RGBA,           
    COMPRESSED_ASTC_4x4_RGBA,       
    COMPRESSED_ASTC_8x8_RGBA        
}

@foreign enum TextureFilterMode {
    FILTER_POINT = 0,               
    FILTER_BILINEAR,                
    FILTER_TRILINEAR,               
    FILTER_ANISOTROPIC_4X,          
    FILTER_ANISOTROPIC_8X,          
    FILTER_ANISOTROPIC_16X,         
}

@foreign enum TextureWrapMode {
    WRAP_REPEAT = 0,        
    WRAP_CLAMP,             
    WRAP_MIRROR_REPEAT,     
    WRAP_MIRROR_CLAMP       
}

@foreign enum CubemapLayoutType {
    CUBEMAP_AUTO_DETECT = 0,        
    CUBEMAP_LINE_VERTICAL,          
    CUBEMAP_LINE_HORIZONTAL,        
    CUBEMAP_CROSS_THREE_BY_FOUR,    
    CUBEMAP_CROSS_FOUR_BY_THREE,    
    CUBEMAP_PANORAMA                
}

@foreign enum FontType {
    FONT_DEFAULT = 0,       
    FONT_BITMAP,            
    FONT_SDF                
}

@foreign enum BlendMode {
    BLEND_ALPHA = 0,        
    BLEND_ADDITIVE,         
    BLEND_MULTIPLIED,       
    BLEND_ADD_COLORS,       
    BLEND_SUBTRACT_COLORS,  
    BLEND_CUSTOM            
}

@foreign enum GestureType {
    GESTURE_NONE        = 0,
    GESTURE_TAP         = 1,
    GESTURE_DOUBLETAP   = 2,
    GESTURE_HOLD        = 4,
    GESTURE_DRAG        = 8,
    GESTURE_SWIPE_RIGHT = 16,
    GESTURE_SWIPE_LEFT  = 32,
    GESTURE_SWIPE_UP    = 64,
    GESTURE_SWIPE_DOWN  = 128,
    GESTURE_PINCH_IN    = 256,
    GESTURE_PINCH_OUT   = 512
}

@foreign enum CameraMode {
    CAMERA_CUSTOM = 0,
    CAMERA_FREE,
    CAMERA_ORBITAL,
    CAMERA_FIRST_PERSON,
    CAMERA_THIRD_PERSON
}

@foreign enum CameraType {
    CAMERA_PERSPECTIVE = 0,
    CAMERA_ORTHOGRAPHIC
}

@foreign enum NPatchType {
    NPT_9PATCH = 0,         
    NPT_3PATCH_VERTICAL,    
    NPT_3PATCH_HORIZONTAL   
}

@foreign 
typedef TraceLogCallback = func(logType: int, text: char* const, args: libc.va_list);
